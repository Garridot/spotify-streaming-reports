from sqlalchemy.orm import Session
from app.models.domain.user import User
from app.models.schemas.user import UserCreate

class UserRepository:
    def __init__(self, db_session):
        self.db = db_session

    def get_all_user(self):
        """Finds user by id"""
        return self.db.query(User).all()

    def get_by_id(self, id: int):
        """Finds user by id"""
        return self.db.query(User).filter(User.id == id).first()

    def get_by_email(self, email: str):
        """Finds user by email"""
        return self.db.query(User).filter(User.email == email).first()

    def create(self, email: str):
        """
        Creates new user with autogenerated ID
        Args:
            email: User's email address (unique)            
        Returns:
            Persisted User entity
        """
        user = User(email=email)
        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)  
        return user

    def get_or_create(self, email: str):
        """
        Atomic get-or-create operation
        Returns existing user if found, otherwise creates new
        """
        user = self.get_by_email(email)
        if not user:
            user = self.create(email)
            self.db.commit()
        return user